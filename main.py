import os
import sys
from datetime import datetime
from scripts.utils import setup_logging, ensure_directories, clean_old_files, load_config
from scripts.ai_generator import AIScriptGenerator
from scripts.text_to_speech import text_to_speech
from scripts.online_video_creator import VideoCreator
from scripts.upload_youtube import upload_to_youtube

# Initialize logging
logger = setup_logging()

def main():
    try:
        logger.info("Starting YouTube Shorts Generator")

        # Initialize all required directories
        ensure_directories()

        # Clean old files
        clean_old_files()

        # Load configuration
        config = load_config()
        if not config:
            logger.error("Failed to load configuration")
            sys.exit(1)

        # Initialize components
        video_creator = VideoCreator()

        # Generate paths for output files
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        paths = {
            'audio': f"output/speech_{timestamp}.mp3",
            'video': f"output/video_{timestamp}.mp4"
        }

        # Step 1: Generate quote using AI
        ai_generator = AIScriptGenerator()
        quote, category = ai_generator.generate_quote()
        logger.info(f"[DEBUG] AI generated quote ({category}): {quote}")

        title = f"ðŸŽ¯ AI-Generated {category.title()} Quote #Shorts"
        description = f"{quote}\n\n"
        description += f"Generated by AI | {datetime.now().strftime('%B %d, %Y')}\n\n"
        description += " ".join([f"#{tag}" for tag in ["motivation", "inspiration", "quotes", "shorts", category]])
        logger.info(f"[DEBUG] Using quote ({category}): {quote}")

        # Step 2: Convert quote to speech using OpenRouter
        logger.info("Converting text to speech...")
        if not text_to_speech(quote, paths['audio']):
            raise RuntimeError("Failed to convert text to speech")

        # Step 3: Create video using OpenRouter
        logger.info("Creating video...")
        if not video_creator.create_video(quote, paths['audio'], paths['video']):
            raise RuntimeError("Failed to create video")

        # Step 4: Upload to YouTube
        logger.info("Uploading to YouTube...")
        if upload_to_youtube(paths['video'], title, description):
            logger.info("Upload successful!")
            logger.info(f"Title: {title}")
            logger.info(f"Category: {category}")
        else:
            raise RuntimeError("Failed to upload video")

        # Clean up temporary files
        for path in paths.values():
            if os.path.exists(path):
                os.remove(path)
                logger.info(f"Cleaned up temporary file: {path}")

    except Exception as e:
        logger.error(f"An error occurred: {e}", exc_info=True)
        sys.exit(1)

if __name__ == "__main__":
    main()